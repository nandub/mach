mach - make a chroot
--------------------

WHAT IS IT ?

mach allows you to set up clean roots from scratch for any distribution or 
distribution variation supported.
This clean build root can be used for several goals :
- making clean packages
- set up chroots for services to run it
- make disk images of clean roots (for example for UML)

mach uses python.
This mach is not to be confused with the microkernel of the same name.
If you can't tell the difference between this mach and that mach from a
cursory look then neither is for you.

Currently, mach works for rpm-based distributions that can work with apt
for rpm - hopefully this will be extended to other types of package manager
as well.

Included at this moment is the necessary information to set up :

Red Hat 7.2 and 7.3
  - standard
  - updated
  - with JPackage

Red Hat 8.0 and 9
  - standard
  - with JPackage

Dave/Dina (temporarily removed, FIXME)
  - fridge
  - oven

Fedora 8.0 and 9
  - stable
  - testing
  - unstable

SuSE 8.1 and 8.2
  - base
  - full + updates

Some handy features of mach include
  - "caching" of downloaded packages by mounting the archives dir into
    the build root
  - uses apt to resolve dependencies
  - parsing of BuildRequires to install necessary packages for building
  - build ordering when doing multiple builds
  - support for flavours of distribution
  - multiple build roots
  - locking of buildroot to avoid concurrent builds

REQUIREMENTS
------------
- A Linux kernel that can do bind mounts (>= 2.2.0 if I'm correct)
- rpm (>= 4.1 + gpg and cpio if you want GPG)
- python
- sudo
- lots of disk space
- good faith

GETTING STARTED - RPM INSTALL
-----------------------------
- The easiest way to install mach is to just install the RPM.
  Go ahead, don't be scared, it's built with mach.

- After installing, you need to add all users that are going to build through
  mach to the "mach" group in /etc/group, and (possibly) log out and log back
  in so that this change gets registered.  You can check if your user
  is in this group by trying "groups (user)"

GETTING STARTED - SOURCE INSTALL
--------------------------------
- If you insist on running from source, do
  ./configure
  make
  make install

  as root.

- you have to setuid the mach-helper binary.
  chmod u+s $(prefix)/bin/mach-helper

SETTING IT UP
-------------
- configuration files are stored in $(sysconfdir)/mach
  dist contains the list of packages for each distro target, as well
  as download locations for various packages.
  conf contains configuration data, like hosts and resolv.conf files
  
- you can override any configuration variable by putting it in
  ~/.machrc

- you can add dist-specific configurations by creating a dict in ~/.machrc
  It is advised that you create at least a files dict containing
  /etc/resolv.conf and /etc/hosts.

  For example, I have in my .machrc:

config['files'] = {
  '/etc/hosts': '''
127.0.0.1 mach.onshuis onzenbak
''',
  '/etc/resolv.conf': '''
nameserver 127.0.0.1
nameserver 157.193.40.42
search onshuis
'''
}

This ensures that all packages appear to be built on the host mach.onshuis,
and ensures that it can look up hosts through localhost DNS and one outside
DNS.

USING IT
--------
- run mach --help for a list of commands you can use.
- Now for the actual work.  If everything is configured properly, you can now
  do
    mach setup
  and the build root for the default dist should be created for you.
  run
    mach chroot
  and poke around a little.

- To build a package based on a .spec file, run
  mach build (spec file name)

  If the Source: and Patch: lines contain a proper URL, mach will automatically
  download them and build the package

- To build a package from a .src.rpm file, run
  mach rebuild (src.rpm)
  You can specify an http:// or ftp:// file here, and it will be downloaded
  and built automatically.

- To clean the buildroot, run
    mach clean

TIPS & TRICKS
-------------

- When stuff goes wrong when installing a build root, check to see what went
  wrong.  Then when you find the problem, fix it, and clean the build root.
  If this complains about not being able to run rm because no base is installed
  in the chroot, you might have to su to root and clear out the root yourself.

- mach tries to adhere to the FHS.  It uses a lot of disk space by nature.
  You might not have as much space as you would like.  Since security needs
  to be tight, mach-helper is very strict about this location.  A good
  solution for this is to use bind mounts.  For example, I have in my
  /etc/fstab file:
  /home/mach/roots /var/lib/mach/roots auto bind,defaults 0 0
  which causes /home/mach/roots on my big home disk to be mounted again
  on /var/lib/mach/roots.

- mach uses the host's rpm binary to manipulate the database inside the root.
  A lot of fiddling went into this; I could find of no other way to guarantee
  it works reliably for all target platforms.
  As a side effect, you will have to manipulate the target's rpm database
  using rpm and apt from outside the host.
  The easiest way to do this is to use mach to operate on it; for example,
  mach rpm -Uhv (rpm) will install the given rpm in the target's system.

BUGS
----
- rpm 4.1 included with Red hat 8.0 has a few race condition bugs which
  can cause rpm to hang.  If this happens, you should kill -9 the stalling
  rpm process, chroot into the root, run "rm -rf /var/lib/rpm/__*" and retry.
  had given.
- for now, report them to me personally at thomas (at) apestaart (dot) org

ADDING A DISTRIBUTION
---------------------
- Check both dist and conf in sysconfdir/mach and copy from another target.
  Change as required.
- Base packages: list them in the packages[dist] dict under 'base'.
  You can then test by trying to set up this root,
  See if the installation of base packages works well by doing
  mach -r (dist) setup base

- Apt packages :
  - this is the tricky part.  You need to make an rpm of apt for this new
    distribution.  
    The easiest way to do this is to install dependencies in the chroot
    environment by hand and manually make the apt rpm, for example by
    rebuilding the src rpm.
    This part is pretty painful, since the base system is installed with
    --nodeps as to be minimal but functional for apt.  So you're missing a
    lot of common stuff here.
  - after building it, put it online so it can be downloaded, or manually
    copy it to localstatedir/cache/mach/packages/(dist)

DISCLAIMER
----------
Mach is offered under the GPL without any warranty whatsoever.
Let me know where the documentation is lacking, so I can improve on that.
